primary routes
child routes
secondary routes
Angular Modules
  Imports
  Exports
  Declartions
  Providers
  Bootstrap
How routing works
  <a [routerLink]="['/products']">Product Lists</a>
 url is changed->match path->Process redirect
 url is changed->match path->process guards->resolve data->Activate components->Display templates
 
Routing Basics
  Defining the Base Path
    index.html
    <base href="/"> : For Development
    <base href="/APM/">  For Deployment
    Reseting the base path
      Manually reset the path
      Use a task runner
      Use the Angular CLI
        ng build --base-href /APM/
    
 Importing the Angular Router
    RouterModule
        service
        Configuration
        Directives
          -RouterLink
          -RouterLinkActive
          -RouterOutlet
  import {RouterModule} from '@angular/core'
  RouterModule.forRoot()
   Declares the router directives
   Manages our route configuration
   Register the Routerservice
   Used once for the application
  RouterModule.forChild()
    Declares the router directives
    Manages our route configuration
    Does Not register the router service
    used in feature modules

Configuring Application Routes
  RouterModule.forRoot([
      {path:'welcome',component:WelcomeComponent},
      {path:'',redirectTo:'welcome',pathMatch:'full'},
      {path:'**',component:PageNotFoundComponent}
    ]),

Placing the template
    <router-outlet></router-outlet>

Activating Routes
  Navigating the application routes
    routerLink is a attribute directive
    linkparameters array

Using HTML5  or Hash
  HTML5 style
    Leverges HTML5 history pushState
    Default
    More natural Url
    Requires Url Rewriting
 Hash-Based 
    Leverges Url Fragments
    Must be set with{useHash:tru}
    Does not require Url rewriting
Basic checklist:setting up routing
  Define the base path
    <base href="/"> //index.html
  Import router module
    use RouterModule.forRoot() for app
  Configuring Routes
   path:
      -No leading slash
      -'' for default route, '**' for wildcard route
      -casing matters
     component
      Not string name:not enclosed in quotes
      component must be imported
      order is important
     Placing the template
      Add the RouterOutlet Directive
       -Identifies where to display the routed components tempalte
       <router-outlet></router-outlet>
      Activating the route
        <a [routerLink]="['/welcome']">Home</a>
Routing to features
Setting up for Feature Routing
  RouterModule Router service and configurations and Directives activating the routes
Route path naming strategies
  productlist :products
  ProductDetails :products/:id
  ProductEdit :products/:id/edit

Activating route with code
  import {Router} from '@angular/router'
  @Component({})
  export class AppComponent{
    constructor(private router:Router){}
    logOut():void{
      this.router.navigate(['/welcome']);
    }
  }
  this.router.navigate(['/welcome']); //standard syntax
  this.router.navigate('/welcome');   //short-cut syntax
  this.router.naviageByUrl('/welcome'); //complete Url path
  
  Routepaths
    Products
    login
    welcome
    ''
    ***
why define a routing module?
 Better Organization
 Easier to find
 spearation of concerns

Feature Module checklist
  configuration
    Import router module
      -Be sure to use RouterModule.forChild()
      -Configure the routes
      -order matter

Route Parameters

Configuring Routes with Placeholders
  [
   {path:'orders',component:OrderListComponent},
   {path:'orders/:id',component:OrderDetailComponent},
   {path:'orders/:id/items/:itemId',component:OrderItemDetailsComponent}
  ]

Populating Route Parameters
  Template
    <a [routerLink]="['/products',proudct.id]">{{product.ProductName}}</a>
    <a [routerLink]="['/products',proudct.id,'edit']">Edit</a>
    <a [routerLink]="['/products',0,'edit']">Add Product</a>
   
   Component Class
    this.router.navigate(['/products',this.product.id]);
Reading Route Parameters
  ActivatedRouteService
   UrlSegments
   RouteParameters
   QueryParameters
   Resolverdata
   constructor(private route:ActivatedRoute){}
   let id=this.route.snapshot.params['id']
   
   Observable
    this.route.params.subscribe(
      params=>{let id=params['id']}
    )
Reading Route Parameters:Observable
    this.route.params.subscribe(
      params=>{let id=params['id']}
    )
   snapshot
      To read the parameters only once
      simple code  
   observable
     To watch parameter changes
     complex logic
Reading Route Parameters (v4+)
  let id=this.route.snapshot.paramMap.get('id')
  this.route.paramMap.subscribe(
      params=>{let id=params.get('id')}
    )
Defining optional route parameters
  Template
    [routerLink]="['/products',{name:productName,code:productCode,startData:date,endData:data}]
Reading optional Route Parameters
  import {ActivatedRoute} from '@angular/router'
  constructor(private route:ActivatedRoute)
  {
   this.route.snapshot.params['name']
   this.route.snapshot.params['code']
  }

Definig Query Parameters
Template
  <a [routerLink]="['/products',product.id]
     [queryParams]="{filterBy:'er',showImage:true}"></a>
Component Class
  this.router.navigate(['/products'],
      {
        queryParams:{filterBy:'er',showImage:true}
      }
Retaining query parameter
  Template
    <a [routerLink]="['/products']" queryParamsHandling="preserve">Back</a>
  Component Class
    this.route.navigate(['/products'],{queryParamsHandling:'preserve'}
    agular v4 +
    [preserveQueryParams]="true"
Reading query parameters
  import {ActivatedRoute} from '@angular/router'
  constructor(private route:ActivatedRoute)
  {
   this.route.snapshot.queryParams['filterBy']
   this.route.snapshot.queryParams['showImage']
  }

Prefetching Data using Route Resolvers
Benefits of Prefetching Data
 Prevents display of a partial page
 Reuses code
 Improves flow when an error occurs
Providing data with a route
  Amount of data
  scope of data sharing
  how data is used
  Route Parameters
  Optional Parameters
  Query Parameters
  Routes Data Property
  RouteResolver
  Angular Service
Route's Data Property
  Angular Module
    RouterModule.forChild([
      { path: "products", component: ProductListComponent,data:{pageTitle:'Product List' },
      { path: "products/:id", component: ProductDetailComponent },
      { path: "products/:id/edit", component: ProductEditComponent }
    ])
  Component Class
    this.pageTitle=this.route.snapshot.data['pageTitle']


Angular Routing
	How routing works
		<a [routerLink]="['/products']">Product List</a>
		{path:'products',component:ProductListComponent}
		<router-outlet></router-outlet>
	Routing Basics
		Defining the base path
			<base href="/"> :For development http://localhost:3000
			<base href="/APM/"> : For deployment www.mySitecom/APM/
		Resetting the base path
			1.ng build --base-href /APM/ 
			2.ng build -bh /APM/
		Importing the Angular Router
			import {RouterModule} from '@angular/router'
			imports:[BrowserModule,RouterModule]
		Import the Angular Router
			1.RouterModule.forRoot()
				a)Declares the router directives
				b)Manages our route configuration
				c)Register the router service
				d)Used once for the application				
			2.RouterModule.forChild()
				a)Declares the router directives
				b)Manages our route configuration
				c)Does NOT Register the router service
				d)Used in feature modules
		Configure Routes
			[
			 {path:'welcome',component:WelcomeComponent},
			 {path:'',redirectTo:'welcome',pathMatch:'full'},
			 {path:'**',component:PageNotFoundComponent}
			]
		Placing the Templates
			<ul>
			    <li><a routerLink="/welcome">Home</a></li>
			     <li><a routerLink="/products">Home</a></li>
			</ul>
			<router-outlet></router-outlet>
		HTM5 Style
			Leaverages HTML5 history pushState
			Default
			More natural Url
			Requires Url rewriting
		Hash-Based
			Leverages Url fragments
			Must be set with {useHash:true}
			Does not require Url rewriting
		Using Hash-based Urls
			RouterModule.forRoot([],{useHash:true})
	Routing Basics
		Feature Module
			1.An angular module created with the express purpose of organizing
			  the components for a specific application feature area
		Importing the angular Router
			import {RouterModule} from '@angular/router'
			RouterModule.forChild()
		Activating a Route with Code
			import {Router} from '@angular/router'
			constructor(private router:Router){}
			this.router.navigate(['/welcome']); //standard syntax
			this.router.navigate('/welcome');  //short-cut syntax
			this.router.navigateByUrl('/welcome') ;// complete Url path
			http://localhost:3000/products(popup:messages) //current route
			http://localhost:3000/welcome(popup:messages) //navigate()
			http://localhost:3000/welcome //navigateByUrl()
		Separate out routes to their own routing module
		Keep route path order in mind
	Route Parameters
		Configuring Routes with Placeholders
			[
			 {path:'products',component:ProductListComponent},
			 {path:'products/:id',component:ProductDetailComponent}
			 {path:'products/:id/edit',component:ProductEditComponent}
			]		
		Populating Route Parameters	
			Template
			<a routerLInk="/products/product.id">{{product.productName</a>
			<a routerLInk="/products/product.id/edit">Edit</a>
			<a routerLInk="/products/0/edit">Add Prodct</a>
			Component Class
			this.router.navigate(['/products',this.product.id])
		Reading Route Parameters
			Component class
				import {ActivatedRoute} from '@angular/router'
				constructor(private route:ActivatedRoute){}
			Snapshot
				To read the parameters only once
				simple code
				let id=this.route.snapshot.params['id']
			Observable
				To watch for parameters changes
				More complex code
				this.route.params.subscribe(
				   params=>{
					let id=params['id']
				   }
				);
		Defining Query Parameters
			Template
				<a routerLink="/products/product.id" queryParams="{filterBy:'er'showImage:true}"/>
			Component Class
				this.router.navigate(['products'],{queryParams:{filterBy:'er',showImage:true}}

		Retaining Query Parameters
			Template
				<a [routerLink="['/products']" [preserveQueryParams]="true">Back</a>
			Component Class
				this.router.navigate(['/products'],{preserveQueryParams:true});
		Retaining Query Parameters(v4+)
			Template
				<a [routerLink="['/products']" queryParamsHandling="preserve">Back</a>
			Component Class
				this.router.navigate(['/products'],{queryParamsHandling:'preserve'});			
		Optional Parameters
			Not configured
				{path:'products',component:ProductListComponent} 
			Populate
				<a [routerLink]="['/products',{start:startDate,end:endDate}]">...</a>
				this.router.navigate(['/products',{start:startDate,end:endDate}]);
			Read
				this.route.snapshot.params['start'];
    

