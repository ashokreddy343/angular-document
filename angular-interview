1.What Are The New Features Of Angular 2? Why You Used Angular 2?
  Component based
  Directives
  DI
  Typescript support
  Generics
  Forms and Validations
Why You Used Angular 2?
  1.It is entirely component based.
  2.Better change detection
  3.Angular2 has better performance.
  4.Angular2 has more powerful template system.
  5.Angular2 provide simpler APIs, lazy loading and easier to application debugging.
  6.Angular2 much more testable
  7.Angular2 provides to nested level components.
  8.Ahead of Time compilation (AOT) improves rendering speed
  9.Angular2 execute run more than two programs at the same time.
  10.Angular1 is controllers and $scope based but Angular2 is component based.
  11.The Angular2 structural directives syntax is changed like ng-repeat is replaced with *ngFor etc.
  12.In Angular2, local variables are defined using prefix (#) hash. You can see the below *ngFor loop Example.
  13.TypeScript can be used for developing Angular 2 applications
  14.Better syntax and application structure  

What is AOT Compilation? - Pros and Cons of Ahead-of-Time
  AOT compilation stands for “Ahead of Time compilation”
  it are used to compiles the angular components and templates to native JavaScript and HTML during the build time instead of run-time.
  The compiled HTML and JavaScript are deployed to the web server so that the compilation and render time can be saved by the browser.
  It is the big advantage to improve the performance of applications.
  Advantages
    1.Faster Download:The Angular 2 app is already compiled so it is faster.
    2.Faster Rendering
        If the app is not AOT compiled and the compilation process happens in the browser once the application is fully loaded
        This has a wait time for all necessary components to be downloaded and then the time taken by the compiler to compile the app
        With AOT compilation, this is optimized.
    3.Lesser Http Requests
        It is supporting to the lazy loading.
        Actually, lazy loading is great concepts for sending HTTP request to the server. 
        It is minimise the multiple requests for each associated html and css, there is a separate request goes to the server.
    4.Detect error at build time
    5.Better security
  Disadvantages
    1.AOT only works only with HTML and CSS and not for other file types
    2.If required other file types that time we will need to follow the previous build step.
    3.We need to maintain AOT version of bootstrap file.
    4.We need to clean-up step before compiling.
    ng build --aot
    ng serve --aot

What is Lazy Loading and How to enable Lazy Loading?
   Lazy loading enables us to load only the module user is interacting and keep the rest to be loaded at run-time on demand
   Lazy loading speeds up the application initial load time by splitting the code into multiple bundles and loading them on demand.
   ex:
     ng new lazydemo 
     ng g m lazy --flat
     ng g c lazy-parent --module lazy
     ng g c lazy-child --module lazy
How would you Optimize the Angular 2 Application for Better Performance?
  1.Consider AOT compilation.
  2.Consider lazy loading instead of fully bundled app if the app size is more.
  3.Keep in mind, your application is bundled and disfeatured.
  4.Keep in mind, your application doesn’t have un-necessary import statements.
  5.Keep in mind, your application’s 3rd party unused library. If exist and not used, removed from your application.
  6.Remove your application dependencies if not required.

Constructor Vs. ngOnInit
  1.The constructor is a default method runs when component is being constructed.
  2.The constructor is a typescript feature and it is used only for a class instantiations and nothing to do with Angular 2.
  3.The constructor called first time before the ngOnInit().
  4.The ngOnInit event is an Angular 2 life-cycle event method that is called after the first ngOnChanges 
  5.The ngOnChanges is called when an input or output binding value changes.
    import { Component, OnInit } from '@angular/core';
    export class HomeComponent implements OnInit {
      constructor() {
      console.log("constrcutor log");
      }
      ngOnInit() {
      console.log("ngOninit")
      }
    }  
  ngOnInit is purely there to give us a signal that Angular has finished initialising the component 

Angular 2  Component Lifecycle Hooks
  constructor
      This is invoked when Angular creates a component or directive by calling new on the class.
  ngOnChanges
      Invoked every time there is a change in one of th input properties of the component.
  ngOnInit
      Invoked when given component has been initialized.
      This hook is only called once after the first ngOnChanges
  ngDoCheck
      
    ngAfterContentInit
    ngAfterContentChecked
    ngAfterViewInit
    ngAfterViewChecked
  ngOnDestroy

What is the Best way to Declare and Access a Global Variable in Angular 2?
  1.Create Global varibles
  2. Import and Use the Global Variables in the Component.
  import { Injectable } from '@angular/core';
  @Injectable()
  export class AppGlobals {
    readonly baseAppUrl: string = 'http://localhost:57431/';
    readonly baseAPIUrl: string = 'https://api.github.com/';
    }

Components
  what is a component?
    In Angular 2, the components are the main way to build or specify HTML elements and business logic on the page
    Application->Component->Component1 and Component2
    Angular 2 Component meta-data annotation is used to register the components.
    Angular 2 components are used to create UI widgets.
    Angular 2 components are used to split to application into smaller parts.
    Only one component is used per DOM element.
    In the Angular 2 components, @View, template and templateUrl are mandatory in the components.
Angular 2 components vs directives
    @Components
        1.@Component meta-data annotation is used  to register the components.
        2.The components are used to create UI widgets
        3.The components are used to split to application into smaller parts.
        4.Only one component is used per DOM element.
        5.In the components, @View, template and templateUrl are mandatory in the components.
     @Directive
        1.@Directive meta-data annotation is used  to register the directives.
        2.The directives are used to add behavior to existing DOM elements.
        3.The directives are use to design a reusable components
        4.More than one directive are used per DOM element
        5.The directive do not have @View etc.
  
Angular 2 @Inputs - How to Passing data into Angular 2 components with @Input?
   @Input allows you to pass data into your controller and templates through html and defining custom properties.
  //app.component.ts
    <app-tutorails [parentData]=name></app-tutorails>
    tutorials.component.ts
    export class TutorailsComponent implements OnInit {
     @Input() parentData:string;  
     }
Angular 2 Component Outputs [@Output Property]
  @Output decorator is used to binds a property of a component to send the data from child component to parent 
   component and this is a one-way communication
  @Output decorates output properties and its binds a property of the type of angular EventEmitter.
  
Angular 2 Hidden Attribute
  Angular 2 [hidden] is a special case binding to hidden property
  It is closest cousin of ng-show and ng-hide.
How do Components Communicate with Each Other in Angular 2?
 1.service
 2.@Input
 3.@Output

What are the difference between Renderer and ElementRef in angular 2?
  In Angular Renderer and ElementRef are used for DOM Manipulation and Renderer and 
  ElementRef are used together to get full platform abstraction
service questions
----------------
What is an Angular 2 Service?
  Angular 2 service is a class that encapsulates some methods (GET/POST/PUT) and provides 
        it result as a service for across your application.
What are the features of Angular 2 Service?
  1.Services are singleton objects.
  2.Services are capable of returning the data in the form promises or observables.
  3.Service class is decorated with Injectable decorator.
  4.The Injectable decorator is required only if our service class is making use of some Angular injectable like Http, 
      Response and HttpModule service within it.

What are the differences between Observables & Promises?
  1.Promise : Promises are only called once and It can return only a single value at a time and the Promises are not cancellable.
  2.Observables : Observables handle multiple values over time and it can return multiple values and the Observables are cancellable.
  3.The Observables are more advanced than Promises.
Steps for creating an Angular 2 Service:-
  1.Import the injectable member i.e
    import {Injectable} from '@angular/core';
  2.Import the HttpModule, Http and Response members’
    import { HttpModule, Http, Response } from '@angular/http';
  3.Add the @Injectable Decorator i.e. @Injectable()
  4.Export to the Service class
    export class UserService {
    constructor(private _http: Http) {  }
    }
Pipe questions
  What is Pipes?
    Pipes transform displayed values within a template.
    Sometimes, the data is not displays in the well format on the template that time where using pipes.
    You also can execute a function in the template to get its returned value.
    Pipe class implements the “PipeTransform” interfaces transform method that accepts an input value and returns the transformed result
    The “@Pipe” decorator allows us to define the pipe name that is globally available for use in any template in the across application
        
        import { Pipe, PipeTransform } from '@angular/core';
        @Pipe({
          name: 'barcode',
          pure: false
        })
        export class BarCodePipe implements PipeTransform {
         transform(value: string, args: any[]): string {
           if (!value) {
            return '';
          }
          return "****-****_" + (value.length > 8 ? (value.length - 8): '')
        }
    }

Angular 2 Built-in Pipes:-
  1.Date
  2.UpperCase
  3.LowerCase
  4.Currency
  5.Percent
  6.Json
  7.Async
Why use Pipes?
  Sometimes, the data is not displays in the correct format on the template that time where using pipes.

What is a pure and impure pipe?
  The pure pipe is by default
   Every pipe has been pure by default.
   If you want to make a pipe impure that time you will allow the setting pure flag to false.
   Pure Pipes
    Angular executes a pure pipe only when it detects a pure change to the input value. A pure change can be primitive or non-primitive
     Primitive-single non-primitive - group of values
   Impure pipes
      Angular executes an impure pipe during every component change detection cycle.
      An impure pipe is called often, as often as every keystroke or mouse-move
      If you want to make a pipe impure that time you will allow the setting pure flag to false.
 What is async pipe ?
  Angular 2 provides us special kinds of pipe that is called Async pipe.
  Async pipe subscribes to an Observable or Promise and returns the latest value it has emitted.
  The Async pipe allows us to bind our templates directly to values that arrive asynchronously manner 
    and this is the great ability for the promises and observables
How to create a custom Pipes?
How to create a globally available custom “Pipe”?
  The “@Pipe” decorator allows us to define the pipe name that is globally available for use in any template in the across application

Directive questions
    there are three types of directives
      1.component directives : directives with a template
      2.structural directives : change the DOM layout by adding and removing DOM elements. 
      3.Attribute Directives :change the appearance or behavior of an element, component, or other directive
Angular 2 Router Outlet Directives
  Router-outlet directive is used to render the components for specific location of your applications.
  Both the template and templateUrl render the components where you use this directive.
  <router-outlet> </router-outlet>
  Router-link directive:- Router-link directive is used to link a specific part of your applications.
        <a [router-link]="['/AboutMe']">About Me</a>

Template Questions
  A template is a HTML view that tells Angular 2 for render your components in the views

Styling questions
 The Angular 2 “styles” or “styleUrls” should only be used for css rules and it is affect the style of the template elements
 This is the best approaches to add styles directly to the components and the view encapsulation is set per component. It is use for some situations
   @Component({
      selector: 'home',
      templateUrl: './home.component.html',
      styleUrls: ['./home.component.css'],
      styles: ['.tbl-row-border { border: 1px solid red;}','.txt-color{color:red;}']
  })

Routing Questions
 The Router is use to map applications URLs to application components.
 There are three main components that you are using to configure routing
    1.Routes: It uses to describe our application's Routes.
    2.Router Imports : It uses to import our application's Routes
    3.RouterOutlet: - It is a placeholder component and use to get expanded to each route's content
    4.RouterLink: - It is use to link to application's routes.
    The “RouterModule.forRoot” method in the module imports to configure the router.
    Router-outlet directive: - Router-outlet directive is used to render the components for specific location of your applications.
    Both the template and templateUrl render the components where you use this directive.
    <router-outlet></router-outlet>
  Is it possible to have a multiple router-outlet in the same template?
      Yes! We can use multiple router-outlets in same template by configuring our routers and simply add the router-outlet name. 
      You can see in the example.
      <div class="row">
        <div class="user">
          <router-outlet name="userList"></router-outlet>
        </div>
      <div class="userInfo">
          <router-outlet name="userInfo"></router-outlet>
      </div>
    </div>
    
const routes: Routes = [
  { path: '', redirectTo: 'home', pathMatch: 'full' },
  { path: 'home', component: HomeComponent },
  { path: 'user', component: userComponent, children: [
     { path: 'userList', component: userListComponent, outlet: 'userList' },
     { path: ':id', component: userInfoComponent, outlet: 'userInfo' }]
  }];
What is Router-link directive in Angular 2?
    Router-link directive: - Router-link directive is used to link a specific part of your applications.
         <a [routerLink]="['/login']">
            <span class='glyphicon glyphicon-Login'></span> Login
        </a>





 
   

    
    
    
    
